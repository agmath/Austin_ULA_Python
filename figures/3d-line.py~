from fig3d import *
import math

def avg(points):
    s = [0]*len(points[0])
    for p in points:
        s = vadd(s, p)
    return smult(1/float(len(points)), s)

width=190
margin = 0
height = 150
sc=1
init3d("oc3trian", int(sc*width), int(sc*height))
beginpage()

scale(sc)

clip()

#seteye([0.3, 0.25, 1, 0])
seteye([0.25, 0.5, 1, 0])
setlight([3,5,10, 0])

gsave()
gsave3d()

s = 70
translate(70, 50)
#scale3d(s,1.19*s,s)
scale3d(s,s,s)

xa = 1.3
ya = 1.3
za = 1.3
def axes(color):
    newpath()
    moveto3d(0,0,0)
    lineto3d(ya,0,0)
    moveto3d(0,0,0)
    lineto3d(0,za,0)
    moveto3d(0,0,0)
    lineto3d(0,0,xa)
    stroke(color)

factor = 0.8

big = 10
origin = [0,0,0]
e1 = [0, big, big]
e2 = [big, big, 0]
e3 = [0, big, 0]
e4 = [big, big, big]

faces = []
faces.append(Face([origin, e1, e3]))
faces.append(Face([origin, e3, e2]))
faces.append(Face([origin, e4, e1]))
faces.append(Face([origin, e2, e4]))

for f in faces:
    setshading(f, [0.5, 0.5, 1,1])
    
polycolor = [1]*3
edgecolor = [0.5]*3
insideedge = [0.65]*3
conecolor = [0.9]*3

axes(0)
alpha = 0.5

gsave()
newpath()
moveto3d(0,0,1)
lineto3d(1,0,0)
lineto3d(0,1,0)
closepath3d()
fill(0.8)

stroke(0.5)
clip()
axes(0.7)

newpath()
moveto3d(0,0,1)
lineto3d(0.5,0.5,0)
moveto3d(0,1,0)
lineto3d(0.5,0,0.5)
moveto3d(1,0,0)
lineto3d(0,0.5,0.5)
stroke()


grestore()

for p in [[0,0,1],[0,1,0],[1,0,0],[0.5,0.5,0],[0.5,0,0.5],[0,0.5,0.5],
          [1/3.,1/3.,1/3.]]:
    point(p, 2, 0.3, 0.3)

dx = 4
Label(r'$(0,0,1)$', [0,1,0], alignment="lb", offset=[dx,dx]).draw()
Label(r'$(0,1,0)$', [1,0,0], alignment="lb", offset=[2,dx]).draw()
Label(r'$(1,0,0)$', [0,0,1], alignment="rb", offset=[-dx,0]).draw()
Label(r'$\displaystyle\left(\tfrac12,0,\tfrac12\right)$',
      [0,0.5,0.5], alignment="rb", offset=[-dx,0]).draw()

Label(r'$\displaystyle\left(\tfrac12,\tfrac12,0\right)$',
      [0.5,0,0.5], alignment="lt", offset=[dx,-dx]).draw()

Label(r'$\displaystyle\left(0,\tfrac12,\tfrac12\right)$',
      [0.5,0.5,0], alignment="lb", offset=[dx,0]).draw()




grestore3d()
grestore()

endpage()
finish()





